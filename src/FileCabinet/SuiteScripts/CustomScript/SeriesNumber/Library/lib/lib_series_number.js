/**
 * @NApiVersion 2.1
 */
define(["N/record", "../../../Library/lib_user_role.js"], (record, libRole) => {
  const autoGeneratedSeries = (options) => {
    log.debug("TYPE", options.newRec.type);
    if (libRole.user()) {
      const recSeriesNumberHolder = record.load({
        type: "customrecord_pdi_series_number_holder",
        id: 1,
        isDynamic: true,
      });

      const objData = mapping(options.newRec.type, recSeriesNumberHolder);
      log.debug("objData", objData);

      const dtWholeDate = new Date();
      const dtYear = dtWholeDate.getFullYear();

      if (objData && Object.keys(objData).length) {
        if (objData.stSeriesHolder == "") {
          log.debug("condition", "IF");
          recSeriesNumberHolder.setValue({
            fieldId: objData.fldId,
            value: 1,
          });

          options.newRec.setValue({
            fieldId: "tranid",
            value: objData.stPrefix + dtYear + "-" + "000000001",
          });
        } else if (objData.stSeriesHolder != "") {
          log.debug("condition", "ELSE");
          const inIncrementSeries = Number(objData.stSeriesHolder) + 1;
          recSeriesNumberHolder.setValue({
            fieldId: objData.fldId,
            value: inIncrementSeries,
          });

          let inSeries = String(inIncrementSeries).padStart(9, "0");
          options.newRec.setValue({
            fieldId: "tranid",
            value: objData.stPrefix + dtYear + "-" + inSeries,
          });
        }

        recSeriesNumberHolder.save();
      }
    }
  };

  function getTypeMap() {
    return {
      purchaserequisition: {
        prefix: "PR-",
        fieldId: "custrecord_requisition",
      },
      purchaseorder: {
        prefix: "PO-",
        fieldId: "custrecord_purchase_order",
      },
      itemreceipt: {
        prefix: "RR-",
        fieldId: "custrecord_item_receipt",
      },
      vendorbill: {
        prefix: "APV-",
        fieldId: "custrecord_vendor_bill",
      },
      vendorpayment: {
        prefix: "CV-",
        fieldId: "custrecord_vendor_payment",
      },
      vendorcredit: {
        prefix: "DM-",
        fieldId: "custrecord_vendor_credit",
      },
      vendorreturnauthorization: {
        prefix: "VRA-",
        fieldId: "custrecord_vendor_return_authorization",
      },
      salesorder: {
        prefix: "SO-",
        fieldId: "custrecord_sales_order",
      },
      invoice: {
        prefix: "SI-",
        fieldId: "custrecord_invoice",
      },
      customerpayment: {
        prefix: "CP-",
        fieldId: "custrecord_customer_payment",
      },
      itemfulfillment: {
        prefix: "IF-",
        fieldId: "custrecord_item_fulfillment",
      },
      creditmemo: {
        prefix: "CM-",
        fieldId: "custrecord_credit_memo",
      },
      returnauthorization: {
        prefix: "AR-",
        fieldId: "custrecord_return_authorization",
      },
      customerrefund: {
        prefix: "CRF-",
        fieldId: "custrecord_customer_refund",
      },
      // add more types here...
    };
  }

  function mapping(stType, recSeriesNumberHolder) {
    const map = getTypeMap();
    const config = map[stType];
    if (!config) return {};

    return {
      stPrefix: config.prefix,
      stSeriesHolder: recSeriesNumberHolder.getValue({
        fieldId: config.fieldId,
      }),
      fldId: config.fieldId,
    };
  }

  const fldSetValue = (options) => {
    if (options.mode !== "edit" && libRole.user()) {
      options.currRec.setValue({
        fieldId: "tranid",
        value: "",
      });
    }
  };

  return { autoGeneratedSeries, fldSetValue };
});
