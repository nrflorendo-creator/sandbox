/**
 * @NApiVersion 2.1
 */
define(["N/query", "N/record", "../../Library/lib_user_role.js"], (
  query,
  record,
  libRole
) => {
  const autoGeneratedSeries = (options) => {
    const stType = options.newRec.type;
    log.debug("stType", stType);
    if (libRole.user()) {
      let recSeriesNumberHolder;

      const dtWholeDate = new Date();
      const dtYear = dtWholeDate.getFullYear();

      const objSeriesYear = checkCurrentYear(dtYear);
      log.debug("objSeriesYear", objSeriesYear);

      if (objSeriesYear) {
        recSeriesNumberHolder = record.load({
          type: "customrecord_pdi_series_number_holder",
          id: objSeriesYear.id,
          isDynamic: true,
        });
      } else {
        recSeriesNumberHolder = record.create({
          type: "customrecord_pdi_series_number_holder",
          isDynamic: true,
        });
        recSeriesNumberHolder.setValue({
          fieldId: "name",
          value: dtYear,
        });
      }

      const objData = mapping(stType, recSeriesNumberHolder);
      log.debug("objData", objData);

      if (objData && Object.keys(objData).length) {
        const sixDigitTypes = ["vendor", "job", "customer"];
        const fieldToSet = sixDigitTypes.includes(stType)
          ? "entityid"
          : "tranid";

        if (objData.stSeriesHolder == "") {
          recSeriesNumberHolder.setValue({
            fieldId: objData.fldId,
            value: 1,
          });

          const firstSeries = sixDigitTypes.includes(stType)
            ? "000001"
            : "000000001";
          options.newRec.setValue({
            fieldId: fieldToSet,
            value: objData.stPrefix + dtYear + "-" + firstSeries,
          });
        } else if (objData.stSeriesHolder != "") {
          const digitLength = sixDigitTypes.includes(stType) ? 6 : 9;

          const inIncrementSeries = Number(objData.stSeriesHolder) + 1;
          recSeriesNumberHolder.setValue({
            fieldId: objData.fldId,
            value: inIncrementSeries,
          });

          let inSeries = String(inIncrementSeries).padStart(digitLength, "0");
          options.newRec.setValue({
            fieldId: fieldToSet,
            value: objData.stPrefix + dtYear + "-" + inSeries,
          });
        }

        recSeriesNumberHolder.save();
      }
    }
  };

  function checkCurrentYear(dtYear) {
    const objData = query
      .runSuiteQL({
        query: `SELECT series_number.name
                  , series_number.id
                  
                  FROM CUSTOMRECORD_PDI_SERIES_NUMBER_HOLDER series_number
                  
                  WHERE series_number.name = ${dtYear}`,
      })
      .asMappedResults()[0];

    return objData;
  }

  function mapping(stType, recSeriesNumberHolder) {
    const map = getTypeMap();
    const config = map[stType];
    if (!config) return {};

    return {
      stPrefix: config.prefix,
      stSeriesHolder: recSeriesNumberHolder.getValue({
        fieldId: config.fieldId,
      }),
      fldId: config.fieldId,
    };
  }

  function getTypeMap() {
    return {
      purchaserequisition: {
        prefix: "PR-",
        fieldId: "custrecord_requisition",
      },
      purchaseorder: {
        prefix: "PO-",
        fieldId: "custrecord_purchase_order",
      },
      itemreceipt: {
        prefix: "RR-",
        fieldId: "custrecord_item_receipt",
      },
      vendorbill: {
        prefix: "APV-",
        fieldId: "custrecord_vendor_bill",
      },
      vendorpayment: {
        prefix: "CV-",
        fieldId: "custrecord_vendor_payment",
      },
      vendorcredit: {
        prefix: "DM-",
        fieldId: "custrecord_vendor_credit",
      },
      vendorreturnauthorization: {
        prefix: "VRA-",
        fieldId: "custrecord_vendor_return_authorization",
      },
      salesorder: {
        prefix: "SO-",
        fieldId: "custrecord_sales_order",
      },
      invoice: {
        prefix: "SI-",
        fieldId: "custrecord_invoice",
      },
      customerpayment: {
        prefix: "CP-",
        fieldId: "custrecord_customer_payment",
      },
      itemfulfillment: {
        prefix: "IF-",
        fieldId: "custrecord_item_fulfillment",
      },
      creditmemo: {
        prefix: "CM-",
        fieldId: "custrecord_credit_memo",
      },
      returnauthorization: {
        prefix: "AR-",
        fieldId: "custrecord_return_authorization",
      },
      customerrefund: {
        prefix: "CRF-",
        fieldId: "custrecord_customer_refund",
      },
      customerdeposit: {
        prefix: "CD-",
        fieldId: "custrecord_customer_deposit",
      },
      vendor: {
        prefix: "VND-",
        fieldId: "custrecord_vendor",
      },
      job: {
        prefix: "PROJ-",
        fieldId: "custrecord_project",
      },
      customer: {
        prefix: "CUS-",
        fieldId: "custrecord_customer",
      },
      // add more types here...
    };
  }

  const fldSetup = (options) => {
    const condition = options.mode !== "edit" && libRole.user();
    if (options.currRec.type === "customer") {
      ["autoname", "entityid"].forEach((fieldId) => {
        if (condition) {
          options.currRec.setValue({
            fieldId,
            value: fieldId === "entityid" ? 0 : false,
          });
        }
        options.currRec.getField({ fieldId }).isDisabled = true;
      });
    } else {
      if (condition) {
        options.currRec.setValue({
          fieldId: "tranid",
          value: "",
        });
      }
    }
  };

  return { autoGeneratedSeries, fldSetup };
});
